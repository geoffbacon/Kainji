"""
Collate TSV files into single CSV.

Utility script for 240 final project. 

Author: Geoff Bacon <bacon@berkeley.edu>

TODO: Automate some cognate finding
"""
import os
import csv
from fuzzywuzzy import fuzz

outfile = 'kainji.csv'
infile = 'kainji-cognates.csv'

# === Read in data ===

file_names = []
for file in os.listdir('.'):
    if file.endswith('.txt'):
        file_names.append(file)

lg_names = [name.split('.')[0] for name in file_names]
lg_names = ['000', 'GLOSS'] + lg_names

all_lgs = [] # empty list to store all lgs
            
for file in file_names:
    data = {}
    data['name'] = file.split('.')[0]
    with open(file, mode='rU') as f:
        reader = csv.reader(f, delimiter='\t', skipinitialspace=True, 
                            quoting=csv.QUOTE_MINIMAL, lineterminator="\n")
        for count, row in enumerate(reader):
            if row[0] != 'BNC ID': # nix header row
                id = row[0]
                gloss = row[1]
                form = row[2]
                data[id] = {'gloss': gloss, 'form': form}
        all_lgs.append(data)

# === Get ids ===

all_ids = [] # empty list to store all id numbers
for lg in all_lgs:
    all_ids.extend(list(lg.keys()))
all_ids = set(all_ids)
all_ids.remove('name')  

# === Construct wordlist ===

word_list = []
word_list.append(lg_names)
for id in all_ids:
    cognate_list = [id]
    gloss = ''
    for lg in all_lgs:
        if id in lg:
            form = lg[id]['form']
            gloss = lg[id]['gloss']
        else:
            form = '?'
        cognate_list.append(form)
    cognate_list.insert(1, gloss)
    word_list.append(cognate_list)
    word_list.append(cognate_list) # So we can overwrite one row with cognate codes

# === Write to CSV ===

with open(outfile, 'w') as f:
    writer = csv.writer(f, delimiter=',')
    writer.writerows(word_list)

# === Match cognates in spreadsheet ===

# === Read in cognates from CSV ===
# 
cognates = {}
with open(infile, mode='rU') as f:
        reader = csv.reader(f, delimiter=',', skipinitialspace=True, 
                            quoting=csv.QUOTE_MINIMAL, lineterminator="\n")
        for count, row in enumerate(reader):
            if row[1] != 'GLOSS':
                id = row[0]
                forms = row[2:]
                cognates[id] = forms
lg_data = {}                
for lg in lg_names[2:]:
    lg_data[lg] = []
    index = lg_names[2:].index(lg)
    for key in cognates:
        row = cognates[key]
        lg_form = row[index]
        lg_data[lg].append(lg_form)


for lg, value in sorted(lg_data.items()):
    print(lg.upper(), ''.join(lg_data[lg]))
    

# amo : 111111111?11{1,2}111111111911111111111111121111111?111111211111111111111111?11111111311111111111111151111111111111?1111
# atsam : ?1sai?111?2?32252114?1221121?21?23?121??3??2?2?1121211?3?21??2?21?2?12212112?2??222121???????22?2212?1??2?212422?1121
# buji : ?12213423113211115223322111312322132214211?32213431221232123432?32213231132212331112222212?332331121123?31332312332
# camo : ?2??135?????????1??????311?????232????51???????????2?1?4?????33??22?????24?2???????????3??????????3???1????5???2???
# cishigini : ?33?2222??2412??12?3??3112241??241??3211???151??2?13?1532??234??333????3131???4?2?????42?2????424422?12?2?2?4?1442
# clela : 2421123?42452342133??44333??13445141436?23?42324342421?741343152?4444?4?42431?45?3?3232?33???3453151?31??343??212?3
# fungwa : 353?1363?3?6345?134??5?342222??261535292?42532?5153521?651??316?4543???34555?3?6?4333?35?4????269??33?1244?3??31554
# gbiri : 4623312?54551163165?1654112511127162?18111324136131211?26341511??242515443662427111141464534?45782?1141?5151??42561
# hun-saare : 27-nɛ́t4133??2?42672173??76312??1??47?74438??1?623?5163466?72??531???6529?4?4273??58?5?15?5??6?????87?64??13?1?3??515?3
# janji : ??2?12{2,4}?????1???13?????412??1??2?1????8??????2????11?1?????6?37???61????13?3??33?1?????????????963?11?4??1?3???21??
# kamuku : ?84?12546??5{1,2}???12????71513?14?281?3?271?????2??4?4551?7?1?73451??75????4385?5?8?644642???4???50?1751?1363?1?5?25?5
# kudu : ??6??25?????????11?????611??2??2?3????0????????????1?5???????33?????????56?4???????????????????????11????1?3???3???
# kurama : 515312{2,5}56314216416145484614612129181647131464246171141321143638117467361637352634745756?575145691281151574433612666
# niragu : 4?5?311?????12?318???5?411?51??2?162??7??1?1?4????1131??4??1?11???42????74?1??29?111???????????862?11?1??1?1???25?7
# piti : 618?415?????2??113???6?171?71??2?181??81?1?1?5????1623??1??2?21???11????17?3??70?151???????????855?1??1??1?6???11?8
# reshe : ?87?54??8??44465162??55314??13??019575?????85647185223?754?86303?887?1??84841612?8?68677?8????78369???1??1?7??61??3
# sheni : ?02?12{2,5}?????1???13?????511??1??2?1?1??21?????2????11?1?????6?19??531????43?3??83?1???????????????2?14?1??1?3???21??
# surubu : 719511?163641166136?27948138125?216681?1315161581911344365?1231159186431311142925{1,9}612728696556794701?15483412772579
# tsikimba : 2336222?7?2412751273243191?915127171921?44?771?3201311?53639234?6?338?4231913?3kó:kò?277988420?667882241?11?924254112?2
# === MrBayes ===

# execute /Users/geoffreybacon/Documents/spring16/230/finalproject/data/kainji.nex
# lset nst=1 rates=gamma
# mcmc ngen=1000000 printfreq=10000 samplefreq=500 nruns=2 nchains=4 savebrlens=yes filename=kainji.out
# showmodel
# mcmc;
# sumt burnin=2500;




        


